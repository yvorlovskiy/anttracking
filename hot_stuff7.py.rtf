{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red89\green138\blue67;\red194\green126\blue101;\red167\green197\blue152;\red140\green211\blue254;\red70\green137\blue204;
\red67\green192\blue160;\red212\green214\blue154;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c41569\c60000\c33333;\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c61176\c86275\c99608;\cssrgb\c33725\c61176\c83922;
\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  cv2\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  numpy \cf2 \strokec2 as\cf4 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  math\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 #motiondetetortest3.py\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 #Yury is gay, and Dustin is EPIC\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 cap = cv2.VideoCapture(\cf6 \strokec6 'multi_ants.mp4'\cf4 \strokec4 )\cf5 \strokec5 #"movingcircles_Trim.mp4"\cf4 \cb1 \strokec4 \
\cb3 fgbg = cv2.createBackgroundSubtractorMOG2(\cf7 \strokec7 999\cf4 \strokec4 , \cf8 \strokec8 detectShadows\cf4 \strokec4 =\cf9 \strokec9 True\cf4 \strokec4 )\cb1 \
\cb3 kernel = np.ones((\cf7 \strokec7 11\cf4 \strokec4 ,\cf7 \strokec7 11\cf4 \strokec4 ),np.uint8)\cb1 \
\cb3 tracker = cv2.TrackerMOSSE_create()\cb1 \
\cb3 multiTracker = cv2.MultiTracker_create()\cb1 \
\cb3 bboxes = []\cb1 \
\
\cb3 params = cv2.SimpleBlobDetector_Params()\cb1 \
\cb3     \cb1 \
\cb3 params.minThreshold = \cf7 \strokec7 0\cf4 \cb1 \strokec4 \
\cb3 params.maxThreshold = \cf7 \strokec7 255\cf4 \cb1 \strokec4 \
\cb3 params.filterByArea = \cf9 \strokec9 True\cf4 \cb1 \strokec4 \
\cb3 params.minArea = \cf7 \strokec7 100\cf4 \cb1 \strokec4 \
\cb3 params.maxArea = \cf7 \strokec7 100000\cf4 \cb1 \strokec4 \
\cb3 params.filterByCircularity = \cf9 \strokec9 False\cf4 \cb1 \strokec4 \
\cb3 params.filterByInertia = \cf9 \strokec9 False\cf4 \cb1 \strokec4 \
\cb3 params.filterByConvexity = \cf9 \strokec9 False\cf4 \cb1 \strokec4 \
\cb3 params.filterByColor = \cf9 \strokec9 False\cf4 \cb1 \strokec4 \
\cb3 params.blobColor = \cf7 \strokec7 0\cf4 \cb1 \strokec4 \
\cb3 detector = cv2.SimpleBlobDetector_create(params)\cb1 \
\
\
\
\cb3 blobdetect = \cf9 \strokec9 False\cf4 \strokec4  \cb1 \
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 while\cf4 \strokec4 (\cf7 \strokec7 1\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cb1 \
\cb3     ret, frame = cap.read()\cb1 \
\
\cb3     boxes = multiTracker.update(frame)\cb1 \
\
\
\cb3     \cf5 \strokec5 #cv2.circle(frame, (rectangle[0], rectangle[1]), 5, (0,255,0))\cf4 \cb1 \strokec4 \
\
\cb3     fake_frame = frame\cb1 \
\cb3     closing = cv2.morphologyEx(fake_frame, cv2.MORPH_CLOSE, kernel)\cb1 \
\cb3     opening = cv2.morphologyEx(closing, cv2.MORPH_OPEN, kernel)\cb1 \
\cb3     dilate = cv2.dilate(closing, (\cf7 \strokec7 5\cf4 \strokec4 , \cf7 \strokec7 5\cf4 \strokec4 ), \cf8 \strokec8 iterations\cf4 \strokec4 =\cf7 \strokec7 1\cf4 \strokec4 )\cb1 \
\
\cb3     ret, thresh=  cv2.threshold(dilate,\cf7 \strokec7 127\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,cv2.THRESH_BINARY)\cb1 \
\cb3     \cb1 \
\cb3     fgmask = fgbg.apply(thresh, \cf9 \strokec9 None\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 )\cb1 \
\
\cb3     keypoints = detector.detect(fgmask)\cb1 \
\
\cb3     bboxes = []\cb1 \
\cb3     boxes = []\cb1 \
\
\
\cb3     \cf2 \strokec2 for\cf4 \strokec4  keypoint \cf9 \strokec9 in\cf4 \strokec4  keypoints:\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  keypoint:\cb1 \
\cb3             x = \cf10 \strokec10 int\cf4 \strokec4 (keypoint.pt[\cf7 \strokec7 0\cf4 \strokec4 ])\cb1 \
\cb3             y = \cf10 \strokec10 int\cf4 \strokec4 (keypoint.pt[\cf7 \strokec7 1\cf4 \strokec4 ])\cb1 \
\cb3             s = \cf10 \strokec10 int\cf4 \strokec4 (keypoint.size)/\cf7 \strokec7 2\cf4 \cb1 \strokec4 \
\cb3             bbox = (x-\cf7 \strokec7 50\cf4 \strokec4 ,y-\cf7 \strokec7 50\cf4 \strokec4 ,\cf7 \strokec7 100\cf4 \strokec4 ,\cf7 \strokec7 100\cf4 \strokec4 )\cb1 \
\cb3             bboxes.append(bbox)\cb1 \
\cb3             cv2.rectangle(fgmask, (x-\cf7 \strokec7 100\cf4 \strokec4 ,y+\cf7 \strokec7 100\cf4 \strokec4 ),(x+\cf7 \strokec7 100\cf4 \strokec4 ,y-\cf7 \strokec7 100\cf4 \strokec4 ),(\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ),\cf7 \strokec7 3\cf4 \strokec4 )\cb1 \
\cb3             cv2.circle(frame, (\cf10 \strokec10 int\cf4 \strokec4 (bbox[\cf7 \strokec7 0\cf4 \strokec4 ]+bbox[\cf7 \strokec7 2\cf4 \strokec4 ]/\cf7 \strokec7 2\cf4 \strokec4 ), \cf10 \strokec10 int\cf4 \strokec4 (bbox[\cf7 \strokec7 1\cf4 \strokec4 ]+bbox[\cf7 \strokec7 3\cf4 \strokec4 ]/\cf7 \strokec7 2\cf4 \strokec4 )), \cf7 \strokec7 2\cf4 \strokec4 , (\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ))\cb1 \
\cb3             cv2.circle(frame, (x, y), \cf7 \strokec7 5\cf4 \strokec4 , (\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 0\cf4 \strokec4 ))\cb1 \
\cb3             \cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (blobdetect == \cf9 \strokec9 False\cf4 \strokec4 ):\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  (\cf11 \strokec11 len\cf4 \strokec4 (bboxes) > \cf7 \strokec7 0\cf4 \strokec4 ):\cb1 \
\cb3             blobdetect = \cf9 \strokec9 True\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 #ok = tracker.init(frame, bboxes[0])\cf4 \cb1 \strokec4 \
\cb3             multiTracker.add(tracker, frame, bbox)\cb1 \
\cb3         \cf2 \strokec2 elif\cf4 \strokec4  (\cf11 \strokec11 len\cf4 \strokec4 (bb0xes) = \cf7 \strokec7 0\cf4 \strokec4 ):\cb1 \
\cb3             \cb1 \
\
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 #ok, box = tracker.update(frame)\cf4 \cb1 \strokec4 \
\cb3         success, box = multiTracker.update(frame)\cb1 \
\cb3         boxes.append(box)\cb1 \
\cb3         cv2.rectangle(frame,(\cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 0\cf4 \strokec4 ]),\cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 1\cf4 \strokec4 ])),(\cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 0\cf4 \strokec4 ]) + \cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 2\cf4 \strokec4 ]),\cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 1\cf4 \strokec4 ]) + \cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 3\cf4 \strokec4 ])),(\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ),\cf7 \strokec7 3\cf4 \strokec4 )\cb1 \
\cb3         cv2.circle(frame, (\cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 0\cf4 \strokec4 ]+box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 2\cf4 \strokec4 ]/\cf7 \strokec7 2\cf4 \strokec4 ), \cf10 \strokec10 int\cf4 \strokec4 (box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 1\cf4 \strokec4 ]+box[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 3\cf4 \strokec4 ]/\cf7 \strokec7 2\cf4 \strokec4 )), \cf7 \strokec7 2\cf4 \strokec4 , (\cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 255\cf4 \strokec4 ,\cf7 \strokec7 0\cf4 \strokec4 ))\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  bbox \cf9 \strokec9 in\cf4 \strokec4  bboxes:\cb1 \
\cb3             \cf2 \strokec2 for\cf4 \strokec4  box \cf9 \strokec9 in\cf4 \strokec4  boxes:\cb1 \
\cb3                 diff = \cf11 \strokec11 len\cf4 \strokec4 (bboxes)-\cf11 \strokec11 len\cf4 \strokec4 (boxes)\cb1 \
\cb3                 \cb1 \
\cb3                 \cf2 \strokec2 if\cf4 \strokec4  (diff>=\cf7 \strokec7 1\cf4 \strokec4 ):\cb1 \
\cb3                     multiTracker.add(tracker, frame, bboxes[diff])\cb1 \
\cb3         \cb1 \
\cb3    \cb1 \
\cb3      \cb1 \
\cb3     \cb1 \
\
\cb3         \cf11 \strokec11 print\cf4 \strokec4 (box)\cb1 \
\cb3     \cb1 \
\cb3             \cb1 \
\cb3     \cf11 \strokec11 print\cf4 \strokec4 (bboxes, \cf6 \strokec6 "fgbg"\cf4 \strokec4 )\cb1 \
\cb3     \cb1 \
\
\cb3     cv2.imshow(\cf6 \strokec6 'frame'\cf4 \strokec4 , frame)\cb1 \
\cb3     cv2.imshow(\cf6 \strokec6 'fgmask'\cf4 \strokec4 , fgmask)\cb1 \
\cb3     \cb1 \
\cb3     \cb1 \
\cb3     k = cv2.waitKey(\cf7 \strokec7 30\cf4 \strokec4 ) & \cf9 \strokec9 0x\cf7 \strokec7 ff\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  k == \cf7 \strokec7 27\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\
\cb3 cap.release()\cb1 \
\cb3 cv2.destroyAllWindows()\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 # NEXT - add and release multitrackers\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 # adding \cf4 \cb1 \strokec4 \
}